AWSTemplateFormatVersion: 2010-09-09
Description: Deploy setup across target accounts

Parameters:
  MasterAccount:
    Type: String
  DevAccount:
    Type: String
  ProdAccount:
    Type: String
  Appname:
    Type: String
    Default: organizations
  CloudWatchLogsRetentionInDays:
    Description: 'The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  Regions:
    Type: List<String>
    Description: List of regions where you want your policy to be scoped
    Default: "ap-southeast-1,us-east-1"

Conditions:
  isMasterAccount: !Equals [!Ref "AWS::AccountId", !Ref MasterAccount]
  isDevAccount: !Equals [!Ref "AWS::AccountId", !Ref DevAccount]
  isProdAccount: !Equals [!Ref "AWS::AccountId", !Ref ProdAccount]

Resources:
  #======================================================================
  #=========================== Master account ===========================
  #======================================================================

  #=========================== DevOps ===========================
  DevOpsGroup:
    Type: AWS::IAM::Group
    Condition: isMasterAccount
    Properties:
      GroupName: DevOps
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: MasterToDev
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - Fn::Sub: arn:aws:iam::${DevAccount}:role/DevOpsCrossAccountRole
        - PolicyName: ProdToDev
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - Fn::Sub: arn:aws:iam::${DevAccount}:role/DevOpsCrossAccountRole

  #=========================== Developers ===========================
  DevelopersGroup:
    Type: AWS::IAM::Group
    Condition: isMasterAccount
    Properties:
      GroupName: Developer
      Policies:
        - PolicyName: MasterToDev
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - Fn::Sub: arn:aws:iam::${DevAccount}:role/DeveloperCrossAccountRole
        - PolicyName: ProdToDev
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - Fn::Sub: arn:aws:iam::${DevAccount}:role/DeveloperCrossAccountRole

  MasterDeveloperPolicy:
    Type: AWS::IAM::Policy
    Condition: isMasterAccount
    Properties:
      Groups:
        - !Ref DevelopersGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            NotAction:
              - iam:*
              - organizations:*
              - account:*
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref Regions
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
              - iam:DeleteServiceLinkedRole
              - iam:ListRoles
              - organizations:DescribeOrganization
              - account:ListRegions
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref Regions
      PolicyName: DeveloperPolicy

  #=========================== Guests ===========================
  GuestsGroup:
    Type: AWS::IAM::Group
    Condition: isMasterAccount
    Properties:
      GroupName: Guests
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  #=========================== All ===============================

  AllowMFAPolicy:
    Type: AWS::IAM::Policy
    Condition: isMasterAccount
    Properties:
      PolicyName: AllowMFAPolicy
      Groups:
        - !Ref DevelopersGroup
        - !Ref DevOpsGroup
        - !Ref GuestsGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowUsersToCreateDeleteTheirOwnVirtualMFADevices
            Effect: Allow
            Action:
              - iam:*VirtualMFADevice
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}
          - Sid: AllowUsersToEnableSyncDisableTheirOwnMFADevices
            Effect: Allow
            Action:
              - iam:EnableMFADevice
              - iam:ListMFADevices
              - iam:ResyncMFADevice
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}
          - Sid: AllowUsersToListVirtualMFADevices
            Effect: Allow
            Action:
              - iam:ListVirtualMFADevices
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:mfa/*
          - Sid: AllowUsersToListUsersInConsole
            Effect: Allow
            Action:
              - iam:ListUsers
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/*
          - Sid: AllowUsersAllActionsForCredentials
            Effect: Allow
            Action:
              - iam:*LoginProfile
              - iam:*AccessKey*
              - iam:*SigningCertificate*
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}
          - Effect: Allow
            Action:
              - iam:ChangePassword
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}
          - Effect: Allow
            Action:
              - iam:GetAccountPasswordPolicy
            Resource:
              - "*"
          - Sid: AllowUsersToSeeStatsOnIAMConsoleDashboard
            Effect: Allow
            Action:
              - iam:GetAccount*
              - iam:ListAccount*
            Resource:
              - "*"


  #=======================================================================
  #=========================== Dev account ===============================
  #=======================================================================

  #=========================== DevOps ===========================
  DevDevOpsRole:
    Type: AWS::IAM::Role
    Condition: isDevAccount
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                - !Ref MasterAccount
            Action:
              - "sts:AssumeRole"
      Description: Federated access for DevOps to development account
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      RoleName: DevOpsCrossAccountRole
      Tags:
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: security
        - Key: environment
          Value: dev

  #=========================== Developer ============================
  DevDeveloperRole:
    Type: AWS::IAM::Role
    Condition: isDevAccount
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                - !Ref MasterAccount
            Action:
              - "sts:AssumeRole"
      Description: Federated access for DevOps to development account
      RoleName: DeveloperCrossAccountRole
      Tags:
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: security
        - Key: environment
          Value: dev

  DevDeveloperPolicy:
    Type: AWS::IAM::Policy
    Condition: isDevAccount
    Properties:
      Roles:
        - !Ref DevDeveloperRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            NotAction:
              - iam:*
              - organizations:*
              - account:*
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref Regions
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
              - iam:DeleteServiceLinkedRole
              - iam:ListRoles
              - organizations:DescribeOrganization
              - account:ListRegions
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref Regions
      PolicyName: DeveloperPolicy


  #=======================================================================
  #=========================== Prod account ==============================
  #=======================================================================
  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: isProdAccount
    Properties:
      RetentionInDays: !Ref CloudWatchLogsRetentionInDays

  TrailLogGroupRole:
    Type: AWS::IAM::Role
    Condition: isProdAccount
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeRole1
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudtrail-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt TrailLogGroup.Arn

  CloudTrailProd:
    Type: AWS::CloudTrail::Trail
    Condition: isProdAccount
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt TrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt TrailLogGroupRole.Arn
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref TrailBucket
      Tags:
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: security
        - Key: environment
          Value: production
      TrailName: ProdAuditingTrail

  TrailBucket:
    Type: AWS::S3::Bucket
    Condition: isProdAccount
    Properties:
      AccessControl: Private
      Tags:
        - Key: app
          Value: !Ref Appname
        - Key: type
          Value: storage
        - Key: env
          Value: production

  TrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: isProdAccount
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${TrailBucket}
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

  #=========================== DevOps ===========================
  ProdDevOpsRole:
    Type: AWS::IAM::Role
    Condition: isProdAccount
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                - !Ref MasterAccount
            Action:
              - "sts:AssumeRole"
      Description: Federated access for DevOps to production account
      RoleName: DevOpsCrossAccountRole
      Tags:
        - Key: app
          Value: organization
        - Key: type
          Value: security
        - Key: environment
          Value: dev

  ProdDevOpsPolicy:
    Type: AWS::IAM::Policy
    Condition: isProdAccount
    Properties:
      PolicyName: DeveloperPolicy
      Roles:
        - !Ref ProdDevOpsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            NotAction:
              - iam:*
              - organizations:*
              - account:*
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref Regions
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
              - iam:DeleteServiceLinkedRole
              - iam:ListRoles
              - organizations:DescribeOrganization
              - account:ListRegions
            Resource: "*"
            Condition:
              StringEquals:
                aws:RequestedRegion: !Ref Regions

  #=========================== Developer ===========================
  ProdDeveloperRole:
    Type: AWS::IAM::Role
    Condition: isProdAccount
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                - !Ref MasterAccount
            Action:
              - "sts:AssumeRole"
      Description: Federated access for DevOps to production account
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      RoleName: DeveloperCrossAccountRole
      Tags:
        - Key: app
          Value: organization
        - Key: type
          Value: security
        - Key: environment
          Value: dev



#===============================================================================================================================================================

#=============================== CloudTrail security events Prod Account ===========================================================

  NetworkAclChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry)
        || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry)
        || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation)
        }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: NetworkAclEventCount
          MetricValue: '1'

  NetworkAclChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailNetworkAclChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a Network ACL.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: NetworkAclEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  GatewayChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway)
        || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway)
        || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway)
        }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: GatewayEventCount
          MetricValue: '1'

  GatewayChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailGatewayChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a Customer or Internet Gateway.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: GatewayEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  VpcChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) ||
        ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection)
        || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection)
        || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc)
        || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink)
        || ($.eventName = EnableVpcClassicLink) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: VpcEventCount
          MetricValue: '1'

  VpcChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailVpcChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a VPC, VPC peering connection or VPC connection to classic.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: VpcEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  EC2InstanceChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances)
        || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName
        = TerminateInstances) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: EC2InstanceEventCount
          MetricValue: '1'

  EC2InstanceChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailEC2InstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start,
        stop or reboot an EC2 instance.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: EC2InstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  EC2LargeInstanceChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = RunInstances) && (($.requestParameters.instanceType
        = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: EC2LargeInstanceEventCount
          MetricValue: '1'

  EC2LargeInstanceChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailEC2LargeInstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start,
        stop or reboot a 4x or 8x-large EC2 instance.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: EC2LargeInstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  CloudTrailChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail)
        || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName
        = StopLogging) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: CloudTrailEventCount
          MetricValue: '1'

  CloudTrailChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a CloudTrail trail, or to start or stop logging to a trail.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: CloudTrailEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  ConsoleSignInFailuresMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed
        authentication") }'
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: ConsoleSignInFailureCount
          MetricValue: '1'

  ConsoleSignInFailuresAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailConsoleSignInFailures
      AlarmDescription: Alarms when an unauthenticated API call is made to sign into
        the console.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '3'

  AuthorizationFailuresMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode =
        "AccessDenied*") }'
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: AuthorizationFailureCount
          MetricValue: '1'

  AuthorizationFailuresAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailAuthorizationFailures
      AlarmDescription: Alarms when an unauthorized API call is made.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: AuthorizationFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  IAMPolicyChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: IAMPolicyEventCount
          MetricValue: '1'

  IAMPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailIAMPolicyChanges
      AlarmDescription: Alarms when an API call is made to change an IAM policy.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: IAMPolicyEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'

  SecurityGroupChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: isProdAccount
    Properties:
      LogGroupName:
        Ref: TrailLogGroup
      FilterPattern: "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName
          = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress)
          || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup)
          || ($.eventName = DeleteSecurityGroup) }"
      MetricTransformations:
        - MetricNamespace: CloudTrailMetrics
          MetricName: SecurityGroupEventCount
          MetricValue: '1'

  SecurityGroupChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: isProdAccount
    Properties:
      AlarmName: CloudTrailSecurityGroupChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a Security Group.
      AlarmActions:
        - Ref: AlarmNotificationTopic
      MetricName: SecurityGroupEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'


  AlarmNotificationTopic:
    Type: AWS::SNS::Topic

#Outputs:
#  DevOpsToDevRole:
#    Value: !GetAtt DevDevOpsRole.Arn
#  DevOpsToDevSwitchLink:
#    Value: !Sub https://signin.aws.amazon.com/switchrole?account=${DevAccount}&roleName=${DevDevOpsRole}&displayName=devDevOps
#  DeveloperToDevRole:
#    Value: !GetAtt DevDeveloperRole.Arn
